<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CZ‘Blog</title>
  <subtitle>随随便便记录记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-09T03:26:54.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>魏成宗</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS LLDB调试</title>
    <link href="http://yoursite.com/2016/11/09/iOS-LLDB%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2016/11/09/iOS-LLDB调试/</id>
    <published>2016-11-09T03:22:29.000Z</published>
    <updated>2016-11-09T03:26:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>LLDB是XCode内置调试工具<br><img src="http://upload-images.jianshu.io/upload_images/2071097-580248ecfbc1b2e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"><br>我们加了断点，然后在运行到断点处就停了下来，接下来我们看到lldb这里了吗？我们可以通过lldb所提供的命令来操作。</p>
<h5 id="常用p、po、call命令"><a href="#常用p、po、call命令" class="headerlink" title="常用p、po、call命令"></a>常用p、po、call命令</h5><p>从官方的描述来看，p、print、call是一样的，但是po就不太一样了，输入一样但是输出不一样。po的输出的是具体对象的内容。</p>
<h5 id="lldb声明变量"><a href="#lldb声明变量" class="headerlink" title="lldb声明变量"></a>lldb声明变量</h5><p>我们可以使用e命令定义变量，然后在调试中使用。看如下的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(lldb) e NSString *$str = @&quot;http://www.huangyibiao.com&quot;</div><div class="line">(lldb) po $str</div><div class="line">http://www.huangyibiao.com</div><div class="line"> </div><div class="line">(lldb) e int $count = 10</div><div class="line">(lldb) p $count</div><div class="line">(int) $count = 10</div><div class="line">(lldb) e NSArray *itemArray = @[@&quot;Test&quot;, @&quot;Demo&quot;, @&quot;huangyibiao&quot;]</div><div class="line">(lldb) po $count</div><div class="line">10</div></pre></td></tr></table></figure>
<p>我们使用e声明了$str变量，然后下面就可以使用了。我们看到通过p命令打印出来的都是$开头的变量了吗？我们在声明和使用时也需要加上$符号，与PHP一样！</p>
<p>在调试时，有时候想临时计算一下某个值来比较时，就可以通过这种方式来实现了，再也不用到源代码处添加上声明实现然后添加一句打印了，是否便利了很多？</p>
<p>#####调用变量的API<br>当我们在断点处，定义了blogName变量了，因此我们可以通过调试命令来调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(lldb) po [blogName uppercaseString]</div><div class="line">标哥的技术博客</div><div class="line"> </div><div class="line">(lldb) po [blogName substringFromIndex:2]</div><div class="line">的技术博客</div></pre></td></tr></table></figure>
<h6 id="强转返回值类型"><a href="#强转返回值类型" class="headerlink" title="强转返回值类型"></a>强转返回值类型</h6><p>当我们调用API返回值类型不指定时，有时候所打印出来的东西是我们看不懂的，比如下面的获取结果应该是“标”字，但是不同类型打印结果却不一样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(lldb) po [blogName characterAtIndex:0]</div><div class="line">26631</div><div class="line"> </div><div class="line">(lldb) po (unsigned int)[blogName characterAtIndex:0]</div><div class="line">26631</div><div class="line"> </div><div class="line">(lldb) po (char)[blogName characterAtIndex:0]</div><div class="line">&apos;\a&apos;</div><div class="line"> </div><div class="line">(lldb) po (NSString *)[blogName characterAtIndex:0]</div><div class="line">0x0000000000006807</div><div class="line"> </div><div class="line">(lldb) po (unichar)[blogName characterAtIndex:0]</div><div class="line">U+6807 u&apos;标&apos;</div></pre></td></tr></table></figure>
<h6 id="设置断点触发条件"><a href="#设置断点触发条件" class="headerlink" title="设置断点触发条件"></a>设置断点触发条件</h6><p>看下图，笔者是怎么设置触发条件的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2071097-2b1f90f0b6d78df8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"><br>我们在NSLog这一行，设置了条件，只有当条件满中时，才会进入断点，不过这里并没有让它进入断点，而条件满足时就发出声音并打印提示语。</p>
<p>这种应用场景主要是在循环遍历数据时，想要断点跟踪就只能通过这种方式了，除非添加NSLog打印，但是这种需要手动添加代码，在调试时才想到要添加一些打印语句，这时候又得重新运行，这太慢了。如果懂得如何设置断点条件，那么就能满足我们的需求了，直接可以设置条件。</p>
<h5 id="常用打印视图层次结构"><a href="#常用打印视图层次结构" class="headerlink" title="常用打印视图层次结构"></a>常用打印视图层次结构</h5><p>当我们想要知道某个视图的结构时，可以通过调用recursiveDescription方法来打印出来，那么其结构就一目了然了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(lldb) po [self.view recursiveDescription]</div><div class="line">&lt;UIView: 0x7fdd1052af10; frame = (0 0; 320 568); autoresize = W+H; layer = &lt;CALayer: 0x7fdd1052b290&gt;&gt;</div><div class="line">   | &lt;UIButton: 0x7fdd10529070; frame = (66 183; 188 40); opaque = NO; autoresize = RM+BM; layer = &lt;CALayer: 0x7fdd1051bff0&gt;&gt;</div><div class="line">   |    | &lt;UIButtonLabel: 0x7fdd104162f0; frame = (41.5 11; 105 18); text = &apos;标哥的技术博客&apos;; alpha = 0.2; opaque = NO; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x7fdd10412590&gt;&gt;</div><div class="line">   |    |    | &lt;_UILabelContentLayer: 0x7fdd12804f30&gt; (layer)</div><div class="line">   | &lt;_UILayoutGuide: 0x7fdd1052b300; frame = (0 0; 0 20); hidden = YES; layer = &lt;CALayer: 0x7fdd1052b710&gt;&gt;</div><div class="line">   | &lt;_UILayoutGuide: 0x7fdd1052c070; frame = (0 568; 0 0); hidden = YES; layer = &lt;CALayer: 0x7fdd1052c200&gt;&gt;</div></pre></td></tr></table></figure>
<h5 id="临时刷新界面UI"><a href="#临时刷新界面UI" class="headerlink" title="临时刷新界面UI"></a>临时刷新界面UI</h5><p>最开始按钮的背景颜色是blueColor，现在我们要在调试过程中修改其背景色为红色，并刷新界面。执行下面的命令行，App界面的按钮背景颜色是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(lldb) e ((UIButton *)sender).backgroundColor = [UIColor redColor]</div><div class="line">(UICachedDeviceRGBColor *) $41 = 0x00007fdd10715b00</div><div class="line">(lldb) e (void)[CATransaction flush]</div></pre></td></tr></table></figure>
<h5 id="修改变量值"><a href="#修改变量值" class="headerlink" title="修改变量值"></a>修改变量值</h5><p>本小节通过使用expr在调试过程中修改变量的值，感谢我的大徒弟在看完之后根据自己的经验总结出这一条技巧，现在也分享出来给大家~</p>
<p>使用很简单，就是这样的规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">expr variable = newValue</div></pre></td></tr></table></figure>
<p>可以输入help查看！</p>
<blockquote>
<p>感谢作者在<a href="http://www.huangyibiao.com/" target="_blank" rel="external">标哥的技术博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LLDB是XCode内置调试工具&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2071097-580248ecfbc1b2e8.png?imageMogr2/auto-orient/strip%7Ci
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="调试" scheme="http://yoursite.com/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="LLDB" scheme="http://yoursite.com/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>UIButton设置图片和文字位置</title>
    <link href="http://yoursite.com/2016/11/08/UIButton%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E5%92%8C%E6%96%87%E5%AD%97%E4%BD%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/11/08/UIButton设置图片和文字位置/</id>
    <published>2016-11-08T11:36:09.000Z</published>
    <updated>2016-11-09T03:18:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发的过程中经常会遇到需要在button中放置图片和文字，比如将图片放置在button左边，文字放置在右边。实现的方法也是很多的。</p>
<p>因为UIButton也是继承自UIView，因此可以像其它的view一样添加subView，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//创建button</div><div class="line">UIButton *button = [UIButton buttonWithType:UIButtonTypeRoundedRect];</div><div class="line">// 创建imageview</div><div class="line">UIImage *image = [UIImage imageNamed:@"yourImage.png"];</div><div class="line">UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(/*frame*/)];</div><div class="line">[imageView setImage:image];</div><div class="line">// 创建label</div><div class="line">UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(/*frame*/)];</div><div class="line">[label setText:@"Your title"];</div><div class="line">// 添加到button中</div><div class="line">[button addSubview:label];</div><div class="line">[button addSubview:imageView];</div></pre></td></tr></table></figure>
<p>还可以通过继承UIView进行自定制，这种方法的好处是简单明了，但是其实在UIButton中已经包含了UIImageView，我们不需要在自己添加该imageView的。</p>
<p>UIButton中有imageEdgeInsets和titleEdgeInsets两个属性可以控制image和label的位置<br>我们可以给UIButton添加扩展，在扩展中对imageEdgeInsets和titleEdgeInsets进行重新的设置，这样就可以实现图片和文字位置切换。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">typedef struct UIEdgeInsets &#123;</div><div class="line">    CGFloat top, left, bottom, right;  // specify amount to inset (positive) for each of the edges. values can be negative to &apos;outset&apos;</div><div class="line">&#125; UIEdgeInsets;</div></pre></td></tr></table></figure>
<p>从上边我们可以看出来偏移量是上，左，下，右<br>这样就可以通过计算进行偏移量的计算</p>
<blockquote>
<p>比如图片在右文字在左<br>也就是最终我们希望图片上下位置不变top = 0, bottom = 0;向右位移一个label的宽度<br>同时标题上下位置不变top = 0, bottom = 0;向左位移一个图片的宽度<br>即 imageEdgeInsets = UIEdgeInsetsMake(0,0 + labelWidth,0,0 - labelWidth); 图片相对初始状态左边距加了labelWidth，右边减labelWidth，以及titleEdgeInsets ＝ UIEdgeInsetsMake(0,0 - imageViewWidth,0, 0 + imageViewWidth);</p>
</blockquote>
<p><a href="https://github.com/NickyWei/UIButton-CZEdgeInsets/tree/master" target="_blank" rel="external">Demo UIButton类别</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发的过程中经常会遇到需要在button中放置图片和文字，比如将图片放置在button左边，文字放置在右边。实现的方法也是很多的。&lt;/p&gt;
&lt;p&gt;因为UIButton也是继承自UIView，因此可以像其它的view一样添加subView，&lt;/p&gt;
&lt;figure clas
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="UIButton" scheme="http://yoursite.com/tags/UIButton/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的基本命令</title>
    <link href="http://yoursite.com/2016/11/07/Hexo%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/11/07/Hexo的基本命令/</id>
    <published>2016-11-07T05:51:28.000Z</published>
    <updated>2016-11-07T06:28:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo基本常用的命令就四个"><a href="#Hexo基本常用的命令就四个" class="headerlink" title="Hexo基本常用的命令就四个"></a>Hexo基本常用的命令就四个</h2><ol>
<li>hexo g = hexo generate  #生成</li>
<li>hexo s = hexo server  #启动本地预览</li>
<li>hexo d = hexo deploy  #远程部署</li>
<li>hexo n “文章标题” = hexo new “文章标题”  #新建一篇博文</li>
<li>hexo new page “share”</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo基本常用的命令就四个&quot;&gt;&lt;a href=&quot;#Hexo基本常用的命令就四个&quot; class=&quot;headerlink&quot; title=&quot;Hexo基本常用的命令就四个&quot;&gt;&lt;/a&gt;Hexo基本常用的命令就四个&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;hexo g = hexo ge
    
    </summary>
    
      <category term="记录" scheme="http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/11/07/hello-world/"/>
    <id>http://yoursite.com/2016/11/07/hello-world/</id>
    <published>2016-11-07T01:45:30.000Z</published>
    <updated>2016-11-08T11:50:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="http://yoursite.com/2016/11/06/%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2016/11/06/测试/</id>
    <published>2016-11-06T03:16:50.000Z</published>
    <updated>2016-11-07T01:45:30.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
