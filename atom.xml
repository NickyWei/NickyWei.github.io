<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CZ‘Blog</title>
  <subtitle>随随便便记录记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-10T03:45:04.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>魏成宗</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS下JS与OC互相调用MessageHandler</title>
    <link href="http://yoursite.com/2016/11/10/iOS%E4%B8%8BJS%E4%B8%8EOC%E4%BA%92%E7%9B%B8%E8%B0%83%E7%94%A8MessageHandler/"/>
    <id>http://yoursite.com/2016/11/10/iOS下JS与OC互相调用MessageHandler/</id>
    <published>2016-11-10T03:21:59.000Z</published>
    <updated>2016-11-10T03:45:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用WKWebView的时候，如果想要实现JS调用OC方法，除了拦截URL之外，还有一种简单的方式。那就是利用WKWebView的新特性MessageHandler来实现JS调用原生方法。</p>
<h2 id="MessageHandler-是什么？"><a href="#MessageHandler-是什么？" class="headerlink" title="MessageHandler 是什么？"></a>MessageHandler 是什么？</h2><p>WKWebView 初始化时，有一个参数叫configuration，它是WKWebViewConfiguration类型的参数，而WKWebViewConfiguration有一个属性叫userContentController，它又是WKUserContentController类型的参数。WKUserContentController对象有一个方法- addScriptMessageHandler:name:，我把这个功能简称为MessageHandler。</p>
<p> addScriptMessageHandler:name:有两个参数，第一个参数是userContentController的代理对象，第二个参数是JS里发送postMessage的对象。<br>所以要使用MessageHandler功能，就必须要实现WKScriptMessageHandler协议。<br>我们在该API的描述里可以看到在JS中的使用方法：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> window.webkit.messageHandlers.&lt;name&gt;.postMessage(&lt;messageBody&gt;)</div><div class="line">//其中&lt;name&gt;，就是上面方法里的第二个参数`name`。</div><div class="line">//例如我们调用API的时候第二个参数填@&quot;Share&quot;，那么在JS里就是:</div><div class="line">//window.webkit.messageHandlers.Share.postMessage(&lt;messageBody&gt;)</div><div class="line">//&lt;messageBody&gt;是一个键值对，键是body，值可以有多种类型的参数。</div><div class="line">// 在`WKScriptMessageHandler`协议中，我们可以看到mssage是`WKScriptMessage`类型，有一个属性叫body。</div><div class="line">// 而注释里写明了body 的类型：</div><div class="line">Allowed types are NSNumber, NSString, NSDate, NSArray, NSDictionary, and NSNull.</div></pre></td></tr></table></figure>
<h2 id="怎么使用MessageHandler？"><a href="#怎么使用MessageHandler？" class="headerlink" title="怎么使用MessageHandler？"></a>怎么使用MessageHandler？</h2><h3 id="创建WKWebViewConfiguration对象，配置各个API对应的MessageHandler。"><a href="#创建WKWebViewConfiguration对象，配置各个API对应的MessageHandler。" class="headerlink" title="创建WKWebViewConfiguration对象，配置各个API对应的MessageHandler。"></a>创建WKWebViewConfiguration对象，配置各个API对应的MessageHandler。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WKUserContentController对象可以添加多个scriptMessageHandler。</div></pre></td></tr></table></figure>
<p>看了示例代码，会很容易理解。示例代码如下：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];</div><div class="line">configuration.userContentController = [WKUserContentController new];</div><div class="line"></div><div class="line">[configuration.userContentController addScriptMessageHandler:self name:@&quot;ScanAction&quot;];</div><div class="line">[configuration.userContentController addScriptMessageHandler:self name:@&quot;Location&quot;];</div><div class="line">[configuration.userContentController addScriptMessageHandler:self name:@&quot;Share&quot;];</div><div class="line">[configuration.userContentController addScriptMessageHandler:self name:@&quot;Color&quot;];</div><div class="line">[configuration.userContentController addScriptMessageHandler:self name:@&quot;Pay&quot;];</div><div class="line">[configuration.userContentController addScriptMessageHandler:self name:@&quot;Shake&quot;];</div><div class="line">[configuration.userContentController addScriptMessageHandler:self name:@&quot;GoBack&quot;];</div><div class="line">[configuration.userContentController addScriptMessageHandler:self name:@&quot;PlaySound&quot;];</div><div class="line"></div><div class="line">WKPreferences *preferences = [WKPreferences new];</div><div class="line">preferences.javaScriptCanOpenWindowsAutomatically = YES;</div><div class="line">preferences.minimumFontSize = 40.0;</div><div class="line">configuration.preferences = preferences;</div></pre></td></tr></table></figure>
<h3 id="创建WKWebView"><a href="#创建WKWebView" class="headerlink" title="创建WKWebView"></a>创建WKWebView</h3><p>这里没什么好说的，直接看示例代码吧：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">self.webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];</div><div class="line"></div><div class="line">  NSString *urlStr = [[NSBundle mainBundle] pathForResource:@&quot;index.html&quot; ofType:nil];</div><div class="line">  NSURL *fileURL = [NSURL fileURLWithPath:urlStr];</div><div class="line">  [self.webView loadFileURL:fileURL allowingReadAccessToURL:fileURL];</div><div class="line"></div><div class="line">  self.webView.navigationDelegate = self;</div><div class="line">  self.webView.UIDelegate = self;</div><div class="line">  [self.view addSubview:self.webView];</div></pre></td></tr></table></figure>
<h3 id="实现协议方法"><a href="#实现协议方法" class="headerlink" title="实现协议方法"></a>实现协议方法</h3><p>我这里实现了两个协议<wkuidelegate,wkscriptmessagehandler>，WKUIDelegate是因为我在JS中弹出了alert 。WKScriptMessageHandler是因为我们要处理JS调用OC方法的请求。<br>先看实现协议方法的示例代码：</wkuidelegate,wkscriptmessagehandler></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#pragma mark - WKScriptMessageHandler</div><div class="line">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message</div><div class="line">&#123;</div><div class="line">//    message.body  --  Allowed types are NSNumber, NSString, NSDate, NSArray,NSDictionary, and NSNull.</div><div class="line">    if ([message.name isEqualToString:@&quot;ScanAction&quot;]) &#123;</div><div class="line">        NSLog(@&quot;扫一扫&quot;);</div><div class="line">    &#125; else if ([message.name isEqualToString:@&quot;Location&quot;]) &#123;</div><div class="line">        [self getLocation];</div><div class="line">    &#125; else if ([message.name isEqualToString:@&quot;Share&quot;]) &#123;</div><div class="line">        [self shareWithParams:message.body];</div><div class="line">    &#125; else if ([message.name isEqualToString:@&quot;Color&quot;]) &#123;</div><div class="line">        [self changeBGColor:message.body];</div><div class="line">    &#125; else if ([message.name isEqualToString:@&quot;Pay&quot;]) &#123;</div><div class="line">        [self payWithParams:message.body];</div><div class="line">    &#125; else if ([message.name isEqualToString:@&quot;Shake&quot;]) &#123;</div><div class="line">        [self shakeAction];</div><div class="line">    &#125; else if ([message.name isEqualToString:@&quot;GoBack&quot;]) &#123;</div><div class="line">        [self goBack];</div><div class="line">    &#125; else if ([message.name isEqualToString:@&quot;PlaySound&quot;]) &#123;</div><div class="line">        [self playSound:message.body];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>WKScriptMessage有两个关键属性name 和 body。<br>因为我们给每一个OC 方法取了一个name，那么我们就可以根据name 来区分执行不同的方法。body 中存着JS 要给OC 传的参数。<br>关于参数body 的解析，我就举一个body中放字典的例子，其他的稍后可以看demo。<br>解析JS 调用OC 实现分享的参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (void)shareWithParams:(NSDictionary *)tempDic</div><div class="line">&#123;</div><div class="line">    if (![tempDic isKindOfClass:[NSDictionary class]]) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    NSString *title = [tempDic objectForKey:@&quot;title&quot;];</div><div class="line">    NSString *content = [tempDic objectForKey:@&quot;content&quot;];</div><div class="line">    NSString *url = [tempDic objectForKey:@&quot;url&quot;];</div><div class="line">    // 在这里执行分享的操作</div><div class="line"></div><div class="line">    // 将分享结果返回给js</div><div class="line">    NSString *jsStr = [NSString stringWithFormat:@&quot;shareResult(&apos;%@&apos;,&apos;%@&apos;,&apos;%@&apos;)&quot;,title,content,url];</div><div class="line">    [self.webView evaluateJavaScript:jsStr completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123;</div><div class="line">        NSLog(@&quot;%@----%@&quot;,result, error);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>message.boby 就是JS 里传过来的参数。我们不同的方法先做一下容错性判断。然后正常取值就可以了。</p>
<h3 id="处理HTML中JS调用"><a href="#处理HTML中JS调用" class="headerlink" title="处理HTML中JS调用"></a>处理HTML中JS调用</h3><p>HMTL的源码跟之前的HTML内容差不多，只有JS的调用部分改变了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 传null</div><div class="line">function scanClick() &#123;</div><div class="line">    window.webkit.messageHandlers.ScanAction.postMessage(null);</div><div class="line">&#125;</div><div class="line">// 传字典              </div><div class="line">function shareClick() &#123;</div><div class="line">    window.webkit.messageHandlers.Share.postMessage(&#123;title:&apos;测试分享的标题&apos;,content:&apos;测试分享的内容&apos;,url:&apos;http://www.baidu.com&apos;&#125;);</div><div class="line">&#125;</div><div class="line">// 传字符串</div><div class="line">function playSound() &#123; </div><div class="line">    window.webkit.messageHandlers.PlaySound.postMessage(&apos;shake_sound_male.wav&apos;);</div><div class="line">&#125;</div><div class="line">// 传数组</div><div class="line">function colorClick() &#123;</div><div class="line">    window.webkit.messageHandlers.Color.postMessage([67,205,128,0.5]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="OC调用JS"><a href="#OC调用JS" class="headerlink" title="OC调用JS"></a>OC调用JS</h3><p>这里使用WKWebView 实现OC 调用JS方法跟上一篇是一样的，还是利用 </p>
<ul>
<li>evaluateJavaScript:completionHandler:。像下面这样使用：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 将分享结果返回给js</div><div class="line">    NSString *jsStr = [NSString stringWithFormat:@&quot;shareResult(&apos;%@&apos;,&apos;%@&apos;,&apos;%@&apos;)&quot;,title,content,url];</div><div class="line">    [self.webView evaluateJavaScript:jsStr completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123;</div><div class="line">        NSLog(@&quot;%@----%@&quot;,result, error);</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<h2 id="使用MessageHandler-的好处"><a href="#使用MessageHandler-的好处" class="headerlink" title="使用MessageHandler 的好处"></a>使用MessageHandler 的好处</h2><ol>
<li>在JS中写起来简单，不用再用创建URL的方式那么麻烦了。</li>
<li>JS传递参数更方便。使用拦截URL的方式传递参数，只能把参数拼接在后面，如果遇到要传递的参数中有特殊字符，如&amp;、=、？等，必须得转换，否则参数解析肯定会出错。<br>例如传递的url是这样的:<br><a href="http://www.baidu.com/share/openShare.htm?share_uuid=shdfxdfdsfsdf&amp;name=1234556" target="_blank" rel="external">http://www.baidu.com/share/openShare.htm?share_uuid=shdfxdfdsfsdf&amp;name=1234556</a><br>使用拦截URL 的JS调用方式</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">loadURL(&quot;haleyAction://shareClick?title=分享的标题&amp;content=分享的内容&amp;url=链接地址&amp;imagePath=图片地址&quot;); &#125;</div><div class="line">1</div></pre></td></tr></table></figure>
<p>将上面的url 放入链接地址这里后，根本无法区分share_uuid是其他参数，还是url里附带的参数。<br>但是使用MessageHandler 就可以避免特殊字符引起的问题。</p>
<p>更详细的使用步骤还是去工程中查看吧。地址：<a href="https://github.com/Haley-Wong/JS_OC/tree/master/JS_OC_MessageHandler" target="_blank" rel="external">JS_OC_MessageHandler</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用WKWebView的时候，如果想要实现JS调用OC方法，除了拦截URL之外，还有一种简单的方式。那就是利用WKWebView的新特性MessageHandler来实现JS调用原生方法。&lt;/p&gt;
&lt;h2 id=&quot;MessageHandler-是什么？&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="MessageHandler" scheme="http://yoursite.com/tags/MessageHandler/"/>
    
      <category term="JS与OC交互" scheme="http://yoursite.com/tags/JS%E4%B8%8EOC%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>iOS WKWebView使用</title>
    <link href="http://yoursite.com/2016/11/10/iOS-WKWebView%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/11/10/iOS-WKWebView使用/</id>
    <published>2016-11-10T02:52:51.000Z</published>
    <updated>2016-11-10T03:47:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>WKWebView 是 iOS 8 引入的一个 WebKit API，替换 iOS 的 UIWebView 和 OSX 的 WebView，WKWebView 使用 Nitro JavaScript 引擎，运行 JavaScript 和 Safari 一样快。WKWebView 和 UIWebView 使用上有很多区别，这篇主要介绍代理、标题、进度条展示的区别。</p>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p> UIWebView 是 delegate: UIWebViewDelegate，WKWebView 使用以下两个代理</p>
<ol>
<li>navigationDelegate: WKNavigationDelegate</li>
<li>UIDelegate: WKUIDelegate   </li>
</ol>
<h4 id="WKNavigationDelegate"><a href="#WKNavigationDelegate" class="headerlink" title="WKNavigationDelegate"></a>WKNavigationDelegate</h4><p>  该代理提供的方法，可以用来追踪加载过程（页面开始加载、加载完成、加载失败）、决定是否执行跳转。</p>
<table>
<thead>
<tr>
<th>UIWebView</th>
<th>WKWebView </th>
</tr>
</thead>
<tbody>
<tr>
<td>– (NSString )stringByEvaluatingJavaScriptFromString:(NSString )script;</td>
<td>– (void)evaluateJavaScript:(NSString )JavaScriptString completionHandler:(void (^ nullable)(nullable id, NSError __nullable error))completionHandler;  </td>
</tr>
<tr>
<td>– (void)webViewDidStartLoad:(UIWebView *)webView</td>
<td>– (void)webView:(WKWebView )webView didCommitNavigation:(null_unspecified WKNavigation )navigation  </td>
</tr>
<tr>
<td>– (void)webViewDidFinishLoad:(UIWebView *)webView</td>
<td>– (void)webView:(WKWebView )webView didFinishNavigation:(null_unspecified WKNavigation )navigation  </td>
</tr>
<tr>
<td>– (void)webView:(UIWebView )webView didFailLoadWithError:(NSError )error</td>
<td>– (void)webView:(WKWebView )webView didFailNavigation:(null_unspecified WKNavigation )navigation withError:(NSError *)error</td>
</tr>
<tr>
<td>– (BOOL)webView:(UIWebView )webView shouldStartLoadWithRequest:(NSURLRequest )request navigationType:(UIWebViewNavigationType)navigationType</td>
<td>– (void)webView:(WKWebView )webView decidePolicyForNavigationAction:(WKNavigationAction )navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler</td>
</tr>
</tbody>
</table>
<p>比如，如果要拦截网页请求，UIWebView 使用以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType &#123;</div><div class="line">     NSURL *url = request.URL;</div><div class="line">    NSString *host = [url host];</div><div class="line">    if ([url.scheme isEqualToString:@&quot;inapp&quot;]) &#123;</div><div class="line"></div><div class="line">        /*</div><div class="line">         * 做一些处理</div><div class="line">         */</div><div class="line"></div><div class="line">        return NO;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 WKWebView 中则用以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler &#123;</div><div class="line"></div><div class="line">    NSURL *url = navigationAction.request.URL;</div><div class="line">    NSString *host = [url host];</div><div class="line">    if ([url.scheme isEqualToString:@&quot;inapp&quot;]) &#123;</div><div class="line"></div><div class="line">        /*</div><div class="line">         * 做一些处理</div><div class="line">         */</div><div class="line"></div><div class="line">        decisionHandler(WKNavigationActionPolicyCancel);</div><div class="line">    &#125; else &#123;</div><div class="line"></div><div class="line">        decisionHandler(WKNavigationActionPolicyAllow);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取-title"><a href="#获取-title" class="headerlink" title="获取 title"></a>获取 title</h3><p>在 UIWebView 中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.title = [webView stringByEvaluatingJavaScriptFromString:@&quot;document.title&quot;];</div></pre></td></tr></table></figure>
<p>而 WKWebView 有 title 属性可直接获取网页标题，可通过 KVO 方式获取网页标题的动态变化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.title = webView.title;</div></pre></td></tr></table></figure>
<h3 id="estimatedProgress-进度条"><a href="#estimatedProgress-进度条" class="headerlink" title="estimatedProgress 进度条"></a>estimatedProgress 进度条</h3><p>WKWebView 增加了 estimatedProgress，获取网页加载进度，轻松显示进度条。可通过 KVO 的方式获取 estimatedProgress 的变化。首先在 viewDidLoad 中添加观察者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[self.webView addObserver:self forKeyPath:NSStringFromSelector(@selector(estimatedProgress)) options:NSKeyValueObservingOptionNew context:NULL];</div><div class="line">[self.webView addObserver:self forKeyPath:NSStringFromSelector(@selector(title)) options:NSKeyValueObservingOptionNew context:NULL];</div></pre></td></tr></table></figure>
<p>KVO 的实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context &#123;</div><div class="line">    if ([keyPath isEqualToString:NSStringFromSelector(@selector(estimatedProgress))] &amp;&amp; object == self.webView) &#123;</div><div class="line">        NSLog(@&quot;%f&quot;, self.webView.estimatedProgress);</div><div class="line">        // estimatedProgress is a value from 0.0 to 1.0</div><div class="line">        // Update your UI here accordingly</div><div class="line"></div><div class="line">        [self.progressView setAlpha:1.0f];</div><div class="line">        [self.progressView setProgress:self.webView.estimatedProgress animated:YES];</div><div class="line"></div><div class="line">        if(self.webView.estimatedProgress &gt;= 1.0f) &#123;</div><div class="line">            [UIView animateWithDuration:0.3 delay:0.3 options:UIViewAnimationOptionCurveEaseOut animations:^&#123;</div><div class="line">                [self.progressView setAlpha:0.0f];</div><div class="line">            &#125; completion:^(BOOL finished) &#123;</div><div class="line">                [self.progressView setProgress:0.0f animated:NO];</div><div class="line">            &#125;];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; else if ([keyPath isEqualToString:@&quot;title&quot;]) &#123;</div><div class="line">        if (object == self.webView) &#123;</div><div class="line">            self.title = self.webView.title;</div><div class="line">        &#125; else &#123;</div><div class="line">            [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line"></div><div class="line">        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，在 dealloc 中移除观察者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)dealloc &#123;</div><div class="line">    if ([self isViewLoaded]) &#123;</div><div class="line">        [self.webView removeObserver:self forKeyPath:NSStringFromSelector(@selector(estimatedProgress))];</div><div class="line">        [self.webView removeObserver:self forKeyPath:NSStringFromSelector(@selector(title))];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [self.webView setNavigationDelegate:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Message-Handlers-用于和网页的JS交互"><a href="#Message-Handlers-用于和网页的JS交互" class="headerlink" title="Message Handlers 用于和网页的JS交互"></a>Message Handlers 用于和网页的JS交互</h3><p><a href="http://weichengzong.cf/2016/11/10/iOS%E4%B8%8BJS%E4%B8%8EOC%E4%BA%92%E7%9B%B8%E8%B0%83%E7%94%A8MessageHandler/" target="_blank" rel="external">Message Handlers详解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WKWebView 是 iOS 8 引入的一个 WebKit API，替换 iOS 的 UIWebView 和 OSX 的 WebView，WKWebView 使用 Nitro JavaScript 引擎，运行 JavaScript 和 Safari 一样快。WKWebVi
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="WKWebView" scheme="http://yoursite.com/tags/WKWebView/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS 启动Apache</title>
    <link href="http://yoursite.com/2016/11/09/Mac-OS-%E5%90%AF%E5%8A%A8Apache/"/>
    <id>http://yoursite.com/2016/11/09/Mac-OS-启动Apache/</id>
    <published>2016-11-09T07:37:49.000Z</published>
    <updated>2016-11-09T09:16:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们经常性的需要使用局域网搭建 Web 服务器测试环境，调试一些web界面等，Mac OS X 自带了 Apache 和 PHP 环境，我们只需要简单的启动它就行了。</p>
<h2 id="启动-Apache"><a href="#启动-Apache" class="headerlink" title="启动 Apache"></a>启动 Apache</h2><ul>
<li><p>查看 Apache 版本<br>打开终端，输入  <code>/httpd -v</code>  可以查看 Apache 版本信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ httpd -v</div><div class="line">Server version: Apache/2.4.16 (Unix)</div><div class="line">Server built:   Aug 22 2015 16:51:57</div><div class="line">$</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>启动 Apache<br>在终端输入 sudo apachectl start 即可启动 Apache。<br>启动后，在浏览器中输入 <a href="http://127.0.0.1" target="_blank" rel="external">http://127.0.0.1</a> 或 <a href="http://localhost" target="_blank" rel="external">http://localhost</a> 如果看到 It Works! 页面：<br>那么 Apache 就启动成功了，站点的根目录为系统级根目录 <code>//Library/WebServer/Documents.</code><br>启动后，你可以通过编辑 <code>//etc/apache2/httpd.conf</code> 文件来修改 Apache 配置。</li>
<li>停止 Apache：sudo apachectl stop</li>
<li>重启 Apache：sudo apachectl restart</li>
</ul>
<h2 id="创建用户级根目录"><a href="#创建用户级根目录" class="headerlink" title="创建用户级根目录"></a>创建用户级根目录</h2><ol>
<li>我们也可以创建用户级根目录，更方便管理和操作。<br>在用户目录下创建 <code>/Sites</code> 目录，<code>/cd; mkdir Sites; touch Sites/.localized</code>，旧的 Mac 系统中如果该目录已存在，则略过。</li>
<li><code>/cd /etc/apache2/users</code> 检查目录下是否存在 <code>/username.conf</code> 文件，<code>/username</code> 为当前用户名，如果没有则创建一个 <code>/sudo touch username.conf</code>，并修改文件权限 <code>/sudo chmod 644 username.conf</code>。</li>
<li><p>创建之后，打开  <code>/username.conf</code> 文件，<code>/sudo vi  username.conf</code> 将下面的配置信息写入文件，<code>/username</code> 依然为当前用户名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">针对Apache不同版本 配置不同</div><div class="line">For OSX 10.9 Apache 2.2</div><div class="line">&lt;Directory &quot;/Users/username/Sites/&quot;&gt;</div><div class="line">Options Indexes MultiViews FollowSymLinks</div><div class="line">AllowOverride All</div><div class="line">Order allow,deny</div><div class="line">Allow from all</div><div class="line">&lt;/Directory&gt;</div><div class="line">For OSX 10.10 Apache 2.4</div><div class="line">&lt;Directory &quot;/Users/username/Sites/&quot;&gt;</div><div class="line">AllowOverride All</div><div class="line">Options Indexes MultiViews FollowSymLinks</div><div class="line">Require all granted</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>编辑 <code>//etc/apache2/httpd.conf</code> 文件，找到下列代码，并将前面的注释符号<code>/ #</code> 删除：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Include /private/etc/apache2/extra/httpd-userdir.conf</div><div class="line">LoadModule userdir_module libexec/apache2/mod_userdir.so</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>编辑 <code>//etc/apache2/extra/httpd-userdir.conf</code>文件，找到下列代码，并将前面的注释符号<code>/#</code>删除：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Include /private/etc/apache2/users/*.conf</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>重启 Apache：sudo apachectl restart</li>
</ol>
<p>在浏览器中输入 <a href="http://127.0.0.1/~username" target="_blank" rel="external">http://127.0.0.1/~username</a> 或 <a href="http://localhost/~username，即可测试用户目录是否工作。" target="_blank" rel="external">http://localhost/~username，即可测试用户目录是否工作。</a></p>
<h2 id="启动-PHP"><a href="#启动-PHP" class="headerlink" title="启动 PHP"></a>启动 PHP</h2><p>Mac OS X 也默认集成了 PHP 环境，如果测试需要用到 PHP 环境，可以通过配置手动开启。</p>
<ol>
<li>编辑 <code>//etc/apache2/httpd.conf</code> 文件，找到 <code>/LoadModule php5_module libexec/apache2/libphp5.so</code> 并删除行前的注释符号 #。</li>
<li>重启 Apache：<code>/sudo apachectl restart</code>。</li>
<li>现在 PHP 应该已经可以工作了，在页面中嵌入 <code>/&lt;?php phpinfo(); ?&gt;</code> 可以查看 PHP 信息。</li>
<li>命在终端输入 <code>/php --ini</code> 可查看 PHP 配置文件，我们可以将 <code>//private/etc/php.ini.default</code> 复制一份命名为 <code>//private/etc/php.ini</code> 并修改配置文件，如，设置 <code>/display_errors = On</code> 打开PHP错误显示。<h2 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h2>Mac OS X 没有集成 MySQL，需要自己安装，这个后续补充。</li>
</ol>
<h2 id="开启-HTTPS"><a href="#开启-HTTPS" class="headerlink" title="开启 HTTPS"></a>开启 HTTPS</h2><p>如果测试需要 HTTPS 环境，如， iOS 7.1 以上的设备部署无线安装环境就必须使用 HTTPS，我们可以配置 Apache 开启 HTTPS 服务。</p>
<h2 id="创建自签名证书"><a href="#创建自签名证书" class="headerlink" title="创建自签名证书"></a>创建自签名证书</h2><p>首先创建一个 ssl 目录用来存放证书</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd /etc/apache2/</div><div class="line">$ sudo mkdir ssl</div><div class="line">$ cd ssl</div></pre></td></tr></table></figure>
<ol>
<li><p>创建主机密钥</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ sudo ssh-keygen -f local.server.com.key</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter passphrase (empty for no passphrase): </div><div class="line">Enter same passphrase again: </div><div class="line">Your identification has been saved in local.server.com.key.</div><div class="line">Your public key has been saved in local.server.com.key.pub.</div><div class="line">The key fingerprint is:</div><div class="line">SHA256:bNX90ww2g2GCh38Q/h68JnazkZYtnbkMEb1G5E51QWw root@XuCreamandeiMac.local</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+---[RSA 2048]----+</div><div class="line">|         oo.o +o+|</div><div class="line">|        o.o+ B E.|</div><div class="line">|         oo.+ %  |</div><div class="line">|       . ..o.* B.|</div><div class="line">|        S  .= +.+|</div><div class="line">|       .   . X o.|</div><div class="line">|          o &amp; =  |</div><div class="line">|         . = B . |</div><div class="line">|            . o  |</div><div class="line">+----[SHA256]-----+</div><div class="line">$</div></pre></td></tr></table></figure>
</li>
</ol>
<p> 这里会被要求提供一个密码用于主机密钥，可以选择任何的密码或直接留空。</p>
<p> 也可以使用下面的命令创建密钥：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sudo openssl genrsa -out local.server.com.key 2048</div><div class="line">Generating RSA private key, 2048 bit long modulus</div><div class="line">....+++</div><div class="line">....+++</div><div class="line">e is 65537 (0x10001)</div><div class="line">$</div></pre></td></tr></table></figure>
<ol>
<li><p>创建签署申请</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ sudo openssl req -new -key local.server.com.key -out local.server.com.csr</div><div class="line">You are about to be asked to enter information that will be incorporated</div><div class="line">into your certificate request.</div><div class="line">What you are about to enter is what is called a Distinguished Name or a DN.</div><div class="line">There are quite a few fields but you can leave some blank</div><div class="line">For some fields there will be a default value,</div><div class="line">If you enter &apos;.&apos;, the field will be left blank.</div><div class="line">-----</div><div class="line">Country Name (2 letter code) [AU]:</div><div class="line">State or Province Name (full name) [Some-State]:</div><div class="line">Locality Name (eg, city) []:</div><div class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:</div><div class="line">Organizational Unit Name (eg, section) []:</div><div class="line">Common Name (e.g. server FQDN or YOUR name) []:local.server.com</div><div class="line">Email Address []:</div><div class="line"></div><div class="line">Please enter the following &apos;extra&apos; attributes</div><div class="line">to be sent with your certificate request</div><div class="line">A challenge password []:</div><div class="line">An optional company name []:</div><div class="line">$</div></pre></td></tr></table></figure>
</li>
</ol>
<p>  系统会提示输入各项信息，由于这是自签名的证书，除了 <code>/Common Name (e.g. server FQDN or  YOUR name) []:</code> FQDN（ fully qualified domain name）必须是服务器域名或 IP 外，其他都不重要，可以随意填写或一路回车，这里作为测试使用 <code>/local.server.com</code>。</p>
<ol>
<li><p>创建SSL证书<br>在生产环境中，我们需要提交证书申请（CSR）文件给证书颁发机构，由证书颁发机构提供SSL证书。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  $ sudo openssl x509 -req -days 365 -in local.server.com.csr -signkey local.server.com.key -out local.server.com.crt</div><div class="line">Signature ok</div><div class="line">subject=/C=AU/ST=Some-State/O=Internet Widgits Pty Ltd/CN=local.server.com</div><div class="line">Getting Private key</div><div class="line">$</div></pre></td></tr></table></figure>
</li>
</ol>
<p>  我们也可以直接通过以下的命令创建证书：</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout local.server.com.key -out local.server.com.crt</div></pre></td></tr></table></figure>
<p>   OK，我们看下SSL目录下面的文件，这些文件将在后面被用到：</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   $ ls -l</div><div class="line">-rw-r--r--  1 root  wheel  1180 10 22 13:08 local.server.com.crt</div><div class="line">-rw-r--r--  1 root  wheel   993 10 22 11:58 local.server.com.csr</div><div class="line">-rw-------  1 root  wheel  1679 10 22 11:44 local.server.com.key</div><div class="line">-rw-r--r--  1 root  wheel   408 10 22 11:44 local.server.com.key.pub</div><div class="line">-rw-r--r--  1 root  wheel  1679 10 22 13:19 local.server.com.nopass.key</div></pre></td></tr></table></figure>
<h2 id="配置-SSL"><a href="#配置-SSL" class="headerlink" title="配置 SSL"></a>配置 SSL</h2><ol>
<li><p>加载<code>/mod_ssl.so</code>，编辑 <code>//etc/apache2/httpd.conf</code> 文件，删除下列代码前的注释符号 #：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoadModule ssl_module libexec/apache2/mod_ssl.so</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>包含 <code>/httpd-ssl.conf</code> 文件，编辑 <code>//etc/apache2/httpd.conf</code> 文件，删除下列代码前的注释符号 #：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Include /private/etc/apache2/extra/httpd-ssl.conf</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>添加 <code>/&lt;VirtualHost&gt;</code> 到 <code>/httpd-ssl.conf</code>，编辑 <code>//etc/apache2/extra/httpd-ssl.conf</code> 文件：<br><code>/httpd-ssl.conf</code> 中已经有一条 <code>/&lt;VirtualHost&gt;</code>记录，我们将其注释掉，新建一条：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:443&gt;</div><div class="line">#General setup for the virtual host</div><div class="line">DocumentRoot &quot;/Library/WebServer/Documents&quot;</div><div class="line">ServerName local.server.com</div><div class="line"></div><div class="line">#SSL Engine Switch:</div><div class="line">SSLEngine on</div><div class="line"></div><div class="line">#Server Certificate:</div><div class="line">SSLCertificateFile &quot;/etc/apache2/ssl/local.server.com.crt&quot;</div><div class="line"></div><div class="line">#Server Private Key:</div><div class="line">SSLCertificateKeyFile &quot;/etc/apache2/ssl/local.server.com.key&quot;</div><div class="line"></div><div class="line">#SSL Engine Options:</div><div class="line">&lt;FilesMatch &quot;\.(cgi|shtml|phtml|php)$&quot;&gt;</div><div class="line">    SSLOptions +StdEnvVars</div><div class="line">&lt;/FilesMatch&gt;</div><div class="line">&lt;Directory &quot;/Library/WebServer/CGI-Executables&quot;&gt;</div><div class="line">    SSLOptions +StdEnvVars</div><div class="line">&lt;/Directory&gt;</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>为了能够使用 URL 访问服务器，我们需要配置HOST，<code>/sudo vi /etc/hosts</code>，添加 <code>/127.0.0.1       local.server.com</code></p>
</li>
<li><p>检查配置文件并重启 Apache<br>命令行输入 <code>/$ sudo apachectl -t</code>，提示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AH00526: Syntax error on line 92 of /private/etc/apache2/extra/httpd-ssl.conf:</div><div class="line">SSLSessionCache: &apos;shmcb&apos; session cache not supported (known names: ). Maybe you need to load the appropriate socache module (mod_socache_shmcb?).</div></pre></td></tr></table></figure>
</li>
</ol>
<p>根据提示，编辑<code>//etc/apache2/httpd.conf</code> 文件，删除下列这些代码前的注释符号 #</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoadModule socache_shmcb_module libexec/apache2/mod_socache_shmcb.so</div></pre></td></tr></table></figure>
<p>再次测试，显示 <code>/Syntax OK</code>：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apachectl -t</div><div class="line">Syntax OK</div></pre></td></tr></table></figure>
<p>说明测试通过，重启 Apache：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apachectl restart</div></pre></td></tr></table></figure>
<p>此时，就可以使用 HTTPS 访问本地服务了，在浏览器中输入 <a href="https://local.server.com/" target="_blank" rel="external">https://local.server.com/</a> 检查。</p>
<p>文／小白不是总（简书作者）<br>原文链接：<a href="http://www.jianshu.com/p/d006a34a343f" target="_blank" rel="external">http://www.jianshu.com/p/d006a34a343f</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们经常性的需要使用局域网搭建 Web 服务器测试环境，调试一些web界面等，Mac OS X 自带了 Apache 和 PHP 环境，我们只需要简单的启动它就行了。&lt;/p&gt;
&lt;h2 id=&quot;启动-Apache&quot;&gt;&lt;a href=&quot;#启动-Apache&quot; class=&quot;he
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="Apache" scheme="http://yoursite.com/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>iOS Healthkit和CMPedometer区别</title>
    <link href="http://yoursite.com/2016/11/09/iOS-Healthkit%E5%92%8CCMPedometer%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2016/11/09/iOS-Healthkit和CMPedometer区别/</id>
    <published>2016-11-09T05:43:12.000Z</published>
    <updated>2016-11-09T05:45:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几天在弄计步功能, 找了好久看了几篇零散的文章, 我自己做了总结, 我忘了我看文章的地址了, 没法附上转载连接了</p>
<p>CMPedometer 可以访问用户活动(可以访问计步数据) 适用ios8以上的系统 ios可看最下面说明</p>
<p>Healthkit 是ios系统中的健康应用 需要应用授权来访问健康数据(比如计步)</p>
<p>这两个有什么区别呢?<br>其实 Healthkit 也是 使用 CMPedometer 读取用户的步数和走的里程,当然计算的方法是在手机内部计算的, 它是利用 iphone5s 以上的m处理器来获取数据计算了,所以5s以下的设备是不支持 CMPedometer 手机计步的,当然有大牛可以利用重力传感器和加速度传感器一样可以写出自己的计步器软件,我是个菜鸟只能利用系统的拉</p>
<p>Healthkit计步有个缺点, 计步不准,有人会问了:这个 Healthkit 和我下面的 demo 不都是用 CMPedometer 来获取计步数的,为什么 Healthkit 不准呢?<br>答: 那是因为Healthkit记录的时区问题, ios获取时间的时区按中国的时区少了8个小时, 举个例子, 如果我要记录 5月5日的数据应该是 xxxx-05-05 00:00:00 至xxxx-05-05 23:59:59 这个区间的步数情况, 而 Healthkit 记录的时区却是 xxxx-05-04 16:00:00 至 xxxx-05-05 15:59:59 ,所以Healthkit记录的信息是不准的, 如果要是自己开发计步软件呢,我们就要自己写把, 不要获取 Healthkit 的信息啦</p>
<p>以下demo是用 swift语言写的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">定义个全局变量 如果不是全局变量会报错</div><div class="line">let pedonmeter:CMPedometer = CMPedometer()</div><div class="line"></div><div class="line">在方法里面写, 两种方法用哪个都可以,不明白的地方可以看文档</div><div class="line">//判断该设备是否支持计步功能</div><div class="line">if CMPedometer.isStepCountingAvailable()&#123;</div><div class="line">//开始时间</div><div class="line">let startTime = getStartTime()</div><div class="line">//结束时间</div><div class="line">let endTime = getEndTime()</div><div class="line">//第一种</div><div class="line">//获取一个时间范围内的数据最大7天 参数 开始时间,结束时间, 一个闭包</div><div class="line">pedonmeter.queryPedometerDataFromDate(startTime, toDate:endTime, withHandler: &#123; (pedometerData:CMPedometerData?, error:NSError?) -&gt; Void in</div><div class="line">if error != nil&#123;</div><div class="line">print(&quot;error:\(error)&quot;)</div><div class="line">&#125;</div><div class="line">else&#123;</div><div class="line">print(&quot;开始时间:\(startTime)&quot;)</div><div class="line">print(&quot;结束时间:\(endTime)&quot;)</div><div class="line">print(&quot;步数===\(pedometerData!.numberOfSteps)&quot;)</div><div class="line">print(&quot;距离===\(pedometerData!.distance)&quot;)</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//第二种</div><div class="line">//获取指定开始时间到当前时间的数据 参数 开始时间, 一个闭包</div><div class="line">pedonmeter.startPedometerUpdatesFromDate(startTime, withHandler: &#123; (pedometerData:CMPedometerData?, error:NSError?) -&gt; Void in</div><div class="line">if error != nil&#123;</div><div class="line">print(&quot;error:\(error)&quot;)</div><div class="line">&#125;</div><div class="line">else&#123;</div><div class="line">print(&quot;开始时间:\(startTime)&quot;)</div><div class="line">print(&quot;结束时间:\(endTime)&quot;)</div><div class="line">print(&quot;步数===\(pedometerData!.numberOfSteps)&quot;)</div><div class="line">print(&quot;距离===\(pedometerData!.distance)&quot;)</div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>下面是获取时间的方法,我是获取当天的,你们也可以自己改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">获取当前时区的时间</div><div class="line">*/</div><div class="line">func getEndTime() -&gt; NSDate</div><div class="line">&#123;</div><div class="line">//转换成本地时区</div><div class="line">let date = NSDate()</div><div class="line">let zone = NSTimeZone.systemTimeZone()</div><div class="line">let interval = zone.secondsFromGMTForDate(date)</div><div class="line">let nowDate = date.dateByAddingTimeInterval(Double(interval))</div><div class="line">return nowDate</div><div class="line">&#125;</div><div class="line">/**</div><div class="line">获取开始时间 当天0时0分0秒</div><div class="line">*/</div><div class="line">func getStartTime() -&gt; NSDate</div><div class="line">&#123;</div><div class="line">let datef = NSDateFormatter()</div><div class="line">datef.dateFormat = &quot;yyyy-MM-dd&quot;</div><div class="line">let stringdate = datef.stringFromDate(getEndTime())</div><div class="line">print(&quot;当天日期:\(stringdate)&quot;)</div><div class="line">let tdate = datef.dateFromString(stringdate)</div><div class="line">//获取本地时区的当天0时0分0秒</div><div class="line">let zone = NSTimeZone.systemTimeZone()</div><div class="line">let interval = zone.secondsFromGMTForDate(tdate!)</div><div class="line">let nowday = tdate!.dateByAddingTimeInterval(Double(interval))</div><div class="line">return nowday</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你像支持ios7的话那不就能使用CMPedometer<br>CMPedometer 的前身是 CMStepCounter<br>大家可以参考<a href="http://www.aichengxu.com/view/27076" target="_blank" rel="external">http://www.aichengxu.com/view/27076</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天在弄计步功能, 找了好久看了几篇零散的文章, 我自己做了总结, 我忘了我看文章的地址了, 没法附上转载连接了&lt;/p&gt;
&lt;p&gt;CMPedometer 可以访问用户活动(可以访问计步数据) 适用ios8以上的系统 ios可看最下面说明&lt;/p&gt;
&lt;p&gt;Healthkit 是
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Health" scheme="http://yoursite.com/tags/Health/"/>
    
      <category term="计步器" scheme="http://yoursite.com/tags/%E8%AE%A1%E6%AD%A5%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>记录自己上传AppStore被拒的原因</title>
    <link href="http://yoursite.com/2016/11/09/%E8%AE%B0%E5%BD%95%E8%87%AA%E5%B7%B1%E4%B8%8A%E4%BC%A0AppStore%E8%A2%AB%E6%8B%92%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
    <id>http://yoursite.com/2016/11/09/记录自己上传AppStore被拒的原因/</id>
    <published>2016-11-09T03:56:17.000Z</published>
    <updated>2016-11-09T03:58:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下自己上架应用被拒的一些问题。</p>
<h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><blockquote>
<p>Performance - 2.1<br>We were unable to review your app as it crashed on launch. We have attached detailed crash logs to help troubleshoot this issue.<strong>Next Steps</strong>Please revise your app and test it on a device while connected to an IPv6 network (all apps must support IPv6) to ensure it will launch without crashing.<strong>Resources</strong>For additional information about supporting IPv6 Networks, please refer to <a href="https://developer.apple.com/library/mac/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/UnderstandingandPreparingfortheIPv6Transition/UnderstandingandPreparingfortheIPv6Transition.html#//apple_ref/doc/uid/TP40010220-CH213-SW1" target="_blank" rel="external">Supporting IPv6 DNS64/NAT64 Networks</a> and <a href="https://developer.apple.com/support/ipv6/" target="_blank" rel="external">Supporting IPv6-only Networks</a>.For a networking overview, please see <a href="https://developer.apple.com/library/mac/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/Introduction/Introduction.html" target="_blank" rel="external">About Networking</a>.For information on how to symbolicate and read a crash log, please see <a href="https://developer.apple.com/library/content/technotes/tn2151/_index.html" target="_blank" rel="external">Tech Note TN2151 Understanding and Analyzing Application Crash Reports</a>.If you have difficulty reproducing this issue, please try testing the workflow described in <a href="https://developer.apple.com/library/ios/qa/qa1764/" target="_blank" rel="external">Testing Workflow with Xcode’s Archive feature</a>.If you have code-level questions after utilizing the above resources, you may wish to consult with <a href="https://developer.apple.com/support/technical/submit/" target="_blank" rel="external">Apple Developer Technical Support</a>. When the DTS engineer follows up with you, please be ready to provide:- complete details of your rejection issue(s)- screenshots- steps to reproduce the issue(s)- <a href="https://developer.apple.com/library/content/technotes/tn2151/_index.html" target="_blank" rel="external">symbolicated crash logs</a> - if your issue results in a crash log</p>
</blockquote>
<p>bb了一大堆说就是用你的应用挂了还扯到supporting IPv6，用的最新的网络请求库，网络地址用的是域名，测试没什么问题，即使没数据也不会挂了啊，查了半天竟然是数据库挂了，数据库挂了，数据库挂了，我的天<br><a href="https://github.com/wg689/Solve-App-Store-Review-Problem" target="_blank" rel="external">专门解决苹果审核问题的仓库.有ipv6 和后台定位被拒绝的终极解决方案，还有其他的</a></p>
<h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><blockquote>
<p>-5  . 1.1 LEGAL: PRIVACY - DATA COLLECTION AND STORAGE<br>Legal -5.1.1<br>Your app uses the HealthKit or CareKit frameworks but does not include the required privacy policy.<strong>Next Steps</strong>Please update your app metadata to include a privacy policy URL and ensure that the URL you provide directs the user to your privacy policy.</p>
</blockquote>
<p>应用中用到了HealthKit框架，有些必要的描述和隐私协议都没具体的写清楚。</p>
<h3 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h3><blockquote>
<p>Design - 4.2.1<br>Your app uses the HealthKit or CareKit APIs but does not indicate integration with the Health app in your Application Description and clearly identify the HealthKit and CareKit functionality in your app’s user interface.<strong>Next Steps</strong>Please revise your app description to specify that your app integrates with the Health app.</p>
</blockquote>
<p>描述都已经写的很明确了，审核的人都不看的，直接把之前的问题抛出来，回复审核的人，内容都已经写好了，就可以发布了</p>
<h3 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h3><blockquote>
<p>Design Preamble<br>Your app includes an update button or alerts the user to update the app. To avoid user confusion, app version updates must utilize the iOS built-in update mechanism. We’ve attached screenshot(s) for your reference.<strong>Next Steps</strong>Please remove the update feature from your app. To distribute a new version of your app, upload the new app binary version into the same iTunes Connect record you created for the app’s previous version. Updated versions keep the same Apple ID, iTunes Connect ID (SKU), and bundle ID as the original version, and are available free to customers who purchased a previous version. </p>
</blockquote>
<p>说是内部包括一个更新按钮或提醒用户更新应用程序，呵呵哒，里面只是一个记录版本号，也没</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下自己上架应用被拒的一些问题。&lt;/p&gt;
&lt;h3 id=&quot;问题一&quot;&gt;&lt;a href=&quot;#问题一&quot; class=&quot;headerlink&quot; title=&quot;问题一&quot;&gt;&lt;/a&gt;问题一&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Performance - 2.1&lt;br&gt;We wer
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="审核被拒" scheme="http://yoursite.com/tags/%E5%AE%A1%E6%A0%B8%E8%A2%AB%E6%8B%92/"/>
    
  </entry>
  
  <entry>
    <title>iOS LLDB调试</title>
    <link href="http://yoursite.com/2016/11/09/iOS-LLDB%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2016/11/09/iOS-LLDB调试/</id>
    <published>2016-11-09T03:22:29.000Z</published>
    <updated>2016-11-09T03:33:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>LLDB是XCode内置调试工具<br><img src="http://upload-images.jianshu.io/upload_images/2071097-580248ecfbc1b2e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"><br>我们加了断点，然后在运行到断点处就停了下来，接下来我们看到lldb这里了吗？我们可以通过lldb所提供的命令来操作。</p>
<h4 id="常用p、po、call命令"><a href="#常用p、po、call命令" class="headerlink" title="常用p、po、call命令"></a>常用p、po、call命令</h4><p>从官方的描述来看，p、print、call是一样的，但是po就不太一样了，输入一样但是输出不一样。po的输出的是具体对象的内容。</p>
<h4 id="lldb声明变量"><a href="#lldb声明变量" class="headerlink" title="lldb声明变量"></a>lldb声明变量</h4><p>我们可以使用e命令定义变量，然后在调试中使用。看如下的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(lldb) e NSString *$str = @&quot;http://www.huangyibiao.com&quot;</div><div class="line">(lldb) po $str</div><div class="line">http://www.huangyibiao.com</div><div class="line"> </div><div class="line">(lldb) e int $count = 10</div><div class="line">(lldb) p $count</div><div class="line">(int) $count = 10</div><div class="line">(lldb) e NSArray *itemArray = @[@&quot;Test&quot;, @&quot;Demo&quot;, @&quot;huangyibiao&quot;]</div><div class="line">(lldb) po $count</div><div class="line">10</div></pre></td></tr></table></figure>
<p>我们使用e声明了$str变量，然后下面就可以使用了。我们看到通过p命令打印出来的都是$开头的变量了吗？我们在声明和使用时也需要加上$符号，与PHP一样！</p>
<p>在调试时，有时候想临时计算一下某个值来比较时，就可以通过这种方式来实现了，再也不用到源代码处添加上声明实现然后添加一句打印了，是否便利了很多？</p>
<p>#####调用变量的API<br>当我们在断点处，定义了blogName变量了，因此我们可以通过调试命令来调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(lldb) po [blogName uppercaseString]</div><div class="line">标哥的技术博客</div><div class="line"> </div><div class="line">(lldb) po [blogName substringFromIndex:2]</div><div class="line">的技术博客</div></pre></td></tr></table></figure>
<h4 id="强转返回值类型"><a href="#强转返回值类型" class="headerlink" title="强转返回值类型"></a>强转返回值类型</h4><p>当我们调用API返回值类型不指定时，有时候所打印出来的东西是我们看不懂的，比如下面的获取结果应该是“标”字，但是不同类型打印结果却不一样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(lldb) po [blogName characterAtIndex:0]</div><div class="line">26631</div><div class="line"> </div><div class="line">(lldb) po (unsigned int)[blogName characterAtIndex:0]</div><div class="line">26631</div><div class="line"> </div><div class="line">(lldb) po (char)[blogName characterAtIndex:0]</div><div class="line">&apos;\a&apos;</div><div class="line"> </div><div class="line">(lldb) po (NSString *)[blogName characterAtIndex:0]</div><div class="line">0x0000000000006807</div><div class="line"> </div><div class="line">(lldb) po (unichar)[blogName characterAtIndex:0]</div><div class="line">U+6807 u&apos;标&apos;</div></pre></td></tr></table></figure>
<h4 id="设置断点触发条件"><a href="#设置断点触发条件" class="headerlink" title="设置断点触发条件"></a>设置断点触发条件</h4><p>看下图，笔者是怎么设置触发条件的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2071097-2b1f90f0b6d78df8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"><br>我们在NSLog这一行，设置了条件，只有当条件满中时，才会进入断点，不过这里并没有让它进入断点，而条件满足时就发出声音并打印提示语。</p>
<p>这种应用场景主要是在循环遍历数据时，想要断点跟踪就只能通过这种方式了，除非添加NSLog打印，但是这种需要手动添加代码，在调试时才想到要添加一些打印语句，这时候又得重新运行，这太慢了。如果懂得如何设置断点条件，那么就能满足我们的需求了，直接可以设置条件。</p>
<h5 id="常用打印视图层次结构"><a href="#常用打印视图层次结构" class="headerlink" title="常用打印视图层次结构"></a>常用打印视图层次结构</h5><p>当我们想要知道某个视图的结构时，可以通过调用recursiveDescription方法来打印出来，那么其结构就一目了然了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(lldb) po [self.view recursiveDescription]</div><div class="line">&lt;UIView: 0x7fdd1052af10; frame = (0 0; 320 568); autoresize = W+H; layer = &lt;CALayer: 0x7fdd1052b290&gt;&gt;</div><div class="line">   | &lt;UIButton: 0x7fdd10529070; frame = (66 183; 188 40); opaque = NO; autoresize = RM+BM; layer = &lt;CALayer: 0x7fdd1051bff0&gt;&gt;</div><div class="line">   |    | &lt;UIButtonLabel: 0x7fdd104162f0; frame = (41.5 11; 105 18); text = &apos;标哥的技术博客&apos;; alpha = 0.2; opaque = NO; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x7fdd10412590&gt;&gt;</div><div class="line">   |    |    | &lt;_UILabelContentLayer: 0x7fdd12804f30&gt; (layer)</div><div class="line">   | &lt;_UILayoutGuide: 0x7fdd1052b300; frame = (0 0; 0 20); hidden = YES; layer = &lt;CALayer: 0x7fdd1052b710&gt;&gt;</div><div class="line">   | &lt;_UILayoutGuide: 0x7fdd1052c070; frame = (0 568; 0 0); hidden = YES; layer = &lt;CALayer: 0x7fdd1052c200&gt;&gt;</div></pre></td></tr></table></figure>
<h4 id="临时刷新界面UI"><a href="#临时刷新界面UI" class="headerlink" title="临时刷新界面UI"></a>临时刷新界面UI</h4><p>最开始按钮的背景颜色是blueColor，现在我们要在调试过程中修改其背景色为红色，并刷新界面。执行下面的命令行，App界面的按钮背景颜色是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(lldb) e ((UIButton *)sender).backgroundColor = [UIColor redColor]</div><div class="line">(UICachedDeviceRGBColor *) $41 = 0x00007fdd10715b00</div><div class="line">(lldb) e (void)[CATransaction flush]</div></pre></td></tr></table></figure>
<h4 id="修改变量值"><a href="#修改变量值" class="headerlink" title="修改变量值"></a>修改变量值</h4><p>本小节通过使用expr在调试过程中修改变量的值，感谢我的大徒弟在看完之后根据自己的经验总结出这一条技巧，现在也分享出来给大家~</p>
<p>使用很简单，就是这样的规则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">expr variable = newValue</div></pre></td></tr></table></figure>
<p>可以输入help查看！</p>
<blockquote>
<p>感谢作者在<a href="http://www.huangyibiao.com/" target="_blank" rel="external">标哥的技术博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LLDB是XCode内置调试工具&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2071097-580248ecfbc1b2e8.png?imageMogr2/auto-orient/strip%7Ci
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="调试" scheme="http://yoursite.com/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="LLDB" scheme="http://yoursite.com/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>UIButton设置图片和文字位置</title>
    <link href="http://yoursite.com/2016/11/08/UIButton%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E5%92%8C%E6%96%87%E5%AD%97%E4%BD%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/11/08/UIButton设置图片和文字位置/</id>
    <published>2016-11-08T11:36:09.000Z</published>
    <updated>2016-11-09T03:18:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发的过程中经常会遇到需要在button中放置图片和文字，比如将图片放置在button左边，文字放置在右边。实现的方法也是很多的。</p>
<p>因为UIButton也是继承自UIView，因此可以像其它的view一样添加subView，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//创建button</div><div class="line">UIButton *button = [UIButton buttonWithType:UIButtonTypeRoundedRect];</div><div class="line">// 创建imageview</div><div class="line">UIImage *image = [UIImage imageNamed:@"yourImage.png"];</div><div class="line">UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(/*frame*/)];</div><div class="line">[imageView setImage:image];</div><div class="line">// 创建label</div><div class="line">UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(/*frame*/)];</div><div class="line">[label setText:@"Your title"];</div><div class="line">// 添加到button中</div><div class="line">[button addSubview:label];</div><div class="line">[button addSubview:imageView];</div></pre></td></tr></table></figure>
<p>还可以通过继承UIView进行自定制，这种方法的好处是简单明了，但是其实在UIButton中已经包含了UIImageView，我们不需要在自己添加该imageView的。</p>
<p>UIButton中有imageEdgeInsets和titleEdgeInsets两个属性可以控制image和label的位置<br>我们可以给UIButton添加扩展，在扩展中对imageEdgeInsets和titleEdgeInsets进行重新的设置，这样就可以实现图片和文字位置切换。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">typedef struct UIEdgeInsets &#123;</div><div class="line">    CGFloat top, left, bottom, right;  // specify amount to inset (positive) for each of the edges. values can be negative to &apos;outset&apos;</div><div class="line">&#125; UIEdgeInsets;</div></pre></td></tr></table></figure>
<p>从上边我们可以看出来偏移量是上，左，下，右<br>这样就可以通过计算进行偏移量的计算</p>
<blockquote>
<p>比如图片在右文字在左<br>也就是最终我们希望图片上下位置不变top = 0, bottom = 0;向右位移一个label的宽度<br>同时标题上下位置不变top = 0, bottom = 0;向左位移一个图片的宽度<br>即 imageEdgeInsets = UIEdgeInsetsMake(0,0 + labelWidth,0,0 - labelWidth); 图片相对初始状态左边距加了labelWidth，右边减labelWidth，以及titleEdgeInsets ＝ UIEdgeInsetsMake(0,0 - imageViewWidth,0, 0 + imageViewWidth);</p>
</blockquote>
<p><a href="https://github.com/NickyWei/UIButton-CZEdgeInsets/tree/master" target="_blank" rel="external">Demo UIButton类别</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发的过程中经常会遇到需要在button中放置图片和文字，比如将图片放置在button左边，文字放置在右边。实现的方法也是很多的。&lt;/p&gt;
&lt;p&gt;因为UIButton也是继承自UIView，因此可以像其它的view一样添加subView，&lt;/p&gt;
&lt;figure clas
    
    </summary>
    
      <category term="iOS开发" scheme="http://yoursite.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="UIButton" scheme="http://yoursite.com/tags/UIButton/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的基本命令</title>
    <link href="http://yoursite.com/2016/11/07/Hexo%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/11/07/Hexo的基本命令/</id>
    <published>2016-11-07T05:51:28.000Z</published>
    <updated>2016-11-07T06:28:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo基本常用的命令就四个"><a href="#Hexo基本常用的命令就四个" class="headerlink" title="Hexo基本常用的命令就四个"></a>Hexo基本常用的命令就四个</h2><ol>
<li>hexo g = hexo generate  #生成</li>
<li>hexo s = hexo server  #启动本地预览</li>
<li>hexo d = hexo deploy  #远程部署</li>
<li>hexo n “文章标题” = hexo new “文章标题”  #新建一篇博文</li>
<li>hexo new page “share”</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo基本常用的命令就四个&quot;&gt;&lt;a href=&quot;#Hexo基本常用的命令就四个&quot; class=&quot;headerlink&quot; title=&quot;Hexo基本常用的命令就四个&quot;&gt;&lt;/a&gt;Hexo基本常用的命令就四个&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;hexo g = hexo ge
    
    </summary>
    
      <category term="记录" scheme="http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/11/07/hello-world/"/>
    <id>http://yoursite.com/2016/11/07/hello-world/</id>
    <published>2016-11-07T01:45:30.000Z</published>
    <updated>2016-11-08T11:50:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="http://yoursite.com/2016/11/06/%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2016/11/06/测试/</id>
    <published>2016-11-06T03:16:50.000Z</published>
    <updated>2016-11-07T01:45:30.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
